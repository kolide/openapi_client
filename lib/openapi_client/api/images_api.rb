=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module OpenapiClient
  class ImagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates an image given a prompt.
    # @param create_image_request [CreateImageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ImagesResponse]
    def create_image(create_image_request, opts = {})
      data, _status_code, _headers = create_image_with_http_info(create_image_request, opts)
      data
    end

    # Creates an image given a prompt.
    # @param create_image_request [CreateImageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagesResponse, Integer, Hash)>] ImagesResponse data, response status code and response headers
    def create_image_with_http_info(create_image_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.create_image ...'
      end
      # verify the required parameter 'create_image_request' is set
      if @api_client.config.client_side_validation && create_image_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_image_request' when calling ImagesApi.create_image"
      end
      # resource path
      local_var_path = '/images/generations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_image_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ImagesApi.create_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#create_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an edited or extended image given an original image and a prompt.
    # @param image [File] The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
    # @param prompt [String] A text description of the desired image(s). The maximum length is 1000 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
    # @option opts [CreateImageEditRequestModel] :model 
    # @option opts [Integer] :n The number of images to generate. Must be between 1 and 10. (default to 1)
    # @option opts [String] :size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (default to '1024x1024')
    # @option opts [String] :response_format The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (default to 'url')
    # @option opts [String] :user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    # @return [ImagesResponse]
    def create_image_edit(image, prompt, opts = {})
      data, _status_code, _headers = create_image_edit_with_http_info(image, prompt, opts)
      data
    end

    # Creates an edited or extended image given an original image and a prompt.
    # @param image [File] The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
    # @param prompt [String] A text description of the desired image(s). The maximum length is 1000 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
    # @option opts [CreateImageEditRequestModel] :model 
    # @option opts [Integer] :n The number of images to generate. Must be between 1 and 10. (default to 1)
    # @option opts [String] :size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (default to '1024x1024')
    # @option opts [String] :response_format The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (default to 'url')
    # @option opts [String] :user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    # @return [Array<(ImagesResponse, Integer, Hash)>] ImagesResponse data, response status code and response headers
    def create_image_edit_with_http_info(image, prompt, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.create_image_edit ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling ImagesApi.create_image_edit"
      end
      # verify the required parameter 'prompt' is set
      if @api_client.config.client_side_validation && prompt.nil?
        fail ArgumentError, "Missing the required parameter 'prompt' when calling ImagesApi.create_image_edit"
      end
      if @api_client.config.client_side_validation && !opts[:'n'].nil? && opts[:'n'] > 10
        fail ArgumentError, 'invalid value for "opts[:"n"]" when calling ImagesApi.create_image_edit, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'n'].nil? && opts[:'n'] < 1
        fail ArgumentError, 'invalid value for "opts[:"n"]" when calling ImagesApi.create_image_edit, must be greater than or equal to 1.'
      end

      allowable_values = ["256x256", "512x512", "1024x1024"]
      if @api_client.config.client_side_validation && opts[:'size'] && !allowable_values.include?(opts[:'size'])
        fail ArgumentError, "invalid value for \"size\", must be one of #{allowable_values}"
      end
      allowable_values = ["url", "b64_json"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/images/edits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['image'] = image
      form_params['prompt'] = prompt
      form_params['mask'] = opts[:'mask'] if !opts[:'mask'].nil?
      form_params['model'] = opts[:'model'] if !opts[:'model'].nil?
      form_params['n'] = opts[:'n'] if !opts[:'n'].nil?
      form_params['size'] = opts[:'size'] if !opts[:'size'].nil?
      form_params['response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?
      form_params['user'] = opts[:'user'] if !opts[:'user'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ImagesApi.create_image_edit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#create_image_edit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a variation of a given image.
    # @param image [File] The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateImageEditRequestModel] :model 
    # @option opts [Integer] :n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (default to 1)
    # @option opts [String] :response_format The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (default to 'url')
    # @option opts [String] :size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (default to '1024x1024')
    # @option opts [String] :user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    # @return [ImagesResponse]
    def create_image_variation(image, opts = {})
      data, _status_code, _headers = create_image_variation_with_http_info(image, opts)
      data
    end

    # Creates a variation of a given image.
    # @param image [File] The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateImageEditRequestModel] :model 
    # @option opts [Integer] :n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;, only &#x60;n&#x3D;1&#x60; is supported. (default to 1)
    # @option opts [String] :response_format The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (default to 'url')
    # @option opts [String] :size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (default to '1024x1024')
    # @option opts [String] :user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    # @return [Array<(ImagesResponse, Integer, Hash)>] ImagesResponse data, response status code and response headers
    def create_image_variation_with_http_info(image, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagesApi.create_image_variation ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling ImagesApi.create_image_variation"
      end
      if @api_client.config.client_side_validation && !opts[:'n'].nil? && opts[:'n'] > 10
        fail ArgumentError, 'invalid value for "opts[:"n"]" when calling ImagesApi.create_image_variation, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'n'].nil? && opts[:'n'] < 1
        fail ArgumentError, 'invalid value for "opts[:"n"]" when calling ImagesApi.create_image_variation, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "b64_json"]
      if @api_client.config.client_side_validation && opts[:'response_format'] && !allowable_values.include?(opts[:'response_format'])
        fail ArgumentError, "invalid value for \"response_format\", must be one of #{allowable_values}"
      end
      allowable_values = ["256x256", "512x512", "1024x1024"]
      if @api_client.config.client_side_validation && opts[:'size'] && !allowable_values.include?(opts[:'size'])
        fail ArgumentError, "invalid value for \"size\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/images/variations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['image'] = image
      form_params['model'] = opts[:'model'] if !opts[:'model'].nil?
      form_params['n'] = opts[:'n'] if !opts[:'n'].nil?
      form_params['response_format'] = opts[:'response_format'] if !opts[:'response_format'].nil?
      form_params['size'] = opts[:'size'] if !opts[:'size'].nil?
      form_params['user'] = opts[:'user'] if !opts[:'user'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ImagesApi.create_image_variation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagesApi#create_image_variation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
