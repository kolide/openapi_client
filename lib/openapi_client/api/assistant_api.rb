=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module OpenapiClient
  class AssistantApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Modifies an assistant.
    # @param assistant_id [String] The ID of the assistant to modify.
    # @param modify_assistant_request [ModifyAssistantRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AssistantObject]
    def modify_assistant(assistant_id, modify_assistant_request, opts = {})
      data, _status_code, _headers = modify_assistant_with_http_info(assistant_id, modify_assistant_request, opts)
      data
    end

    # Modifies an assistant.
    # @param assistant_id [String] The ID of the assistant to modify.
    # @param modify_assistant_request [ModifyAssistantRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssistantObject, Integer, Hash)>] AssistantObject data, response status code and response headers
    def modify_assistant_with_http_info(assistant_id, modify_assistant_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssistantApi.modify_assistant ...'
      end
      # verify the required parameter 'assistant_id' is set
      if @api_client.config.client_side_validation && assistant_id.nil?
        fail ArgumentError, "Missing the required parameter 'assistant_id' when calling AssistantApi.modify_assistant"
      end
      # verify the required parameter 'modify_assistant_request' is set
      if @api_client.config.client_side_validation && modify_assistant_request.nil?
        fail ArgumentError, "Missing the required parameter 'modify_assistant_request' when calling AssistantApi.modify_assistant"
      end
      # resource path
      local_var_path = '/assistants/{assistant_id}'.sub('{' + 'assistant_id' + '}', CGI.escape(assistant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(modify_assistant_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AssistantObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AssistantApi.modify_assistant",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssistantApi#modify_assistant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
